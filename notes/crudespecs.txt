It needs to work as a lib. Thus, it should be simply embeddable as a pure js/css/html-snippet into the user's codebase. Afterwards, it should work just fine. Hmm...

Process:
	>> Binding Element
	-- bind GC to Binding Element
	>> CSV
	-- split CSV into Head
	-- split CSV into Data
	>> Column selection, type & format
	>> Options
	>> Chart Type
	-- filter Head & Data using Columns
	-- add Options to filtered Data
	-- call Chart on Binding Element

Everything can be either done by user, or internals can be used for easier management(?)
UI Minimal:
	- Select CSV
		>> internal function setDataSource(url : string)
			-- using XmlHttpRequest on url, saves CSVData, parses.
		>> internal function setDataValue(data : string | data : string [,])
			-- when user has already split up data (eg. for compatibility with other file types)
	- Select Binding Element
		>> internal function setContainer(element : HTMLElement | elementId : string)
			-- set internal variable used later
	- Select Chart Type
		<< internal function getChartTypes()
			-- get types (top-most keys) from charttype json
		>> internal function setType(value : string)
			-- sets current type based on string value input
	- Select Columns, Types, Formats
		<< internal function getChartTypeRoles() -- for current
			-- return roles for current type in format F1.0
		<< internal function getChartTypeRoles(type : string)
			-- return roles for selected type in format F1.0
		>> internal function setTypeRoles(data : [,])
			-- fills up roles using format F1.1
		>> internal function setTypeRole(data : [])
			-- fills up specific role using format F1.2
	- Select Options
		-- NotYetImplemented

UI Medium: Select

-- stuff described above will be later referred to simply as "the core" of the app. It tries to minimize coupling with the frontend and requirements on the user.